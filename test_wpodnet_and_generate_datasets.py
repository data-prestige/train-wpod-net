# -*- coding: utf-8 -*-
"""test_wpodnet_and_generate_datasets.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UiVaVP4uXQWYJO01g0B3GWyI6RO9VYJ8
"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext autoreload
# %autoreload 2

import sys, os

try:
  import google.colab
  colab = True
except:
  colab = False
import timeit
import platform
import os
import sys

if colab is True:
    from google.colab.patches import cv2_imshow
    
# Operating System
OS = platform.system()                                                               # returns 'Windows', 'Linux', etc

start_download_time = timeit.default_timer()

if not os.path.exists("./src.zip"):
    os.system('gdown --id "1Vrfqmq7B9BOJ9-5j_kjNuZoOo5wf9-po" --output "./src.zip"')
    if OS == "Linux":
        os.system('unzip -o -n "./src.zip" -d "./"')

if not os.path.exists("./2lines_images.zip"):
    os.system('gdown --id "1w5S-F36BmTnJyPlsvhwwkOB9VFRpmUYi" --output "./2lines_images.zip"')
    if OS == "Linux":
        os.system('unzip -o -n "./2lines_images.zip" -d "./"')
if not os.path.exists("./TrainedWpodNetModels.zip"):
    os.system('gdown --id "1jrrvpTxPtqj4YmGa36TzKEiMBb1FZUSG" --output "./TrainedWpodNetModels.zip"')
    if OS == "Linux":
        os.system('unzip -o -n "./TrainedWpodNetModels.zip" -d "./"')

print("Download and Unzip of Dataset and Models Time : ", timeit.default_timer() - start_download_time)

import keras
import cv2
import traceback
import pdb
import numpy as np

from src.keras_utils import load_model
from glob import glob
from os.path import splitext, basename
from src.utils import im2single
from src.keras_utils import load_model, detect_lp
from src.label import Shape, writeShapes
import matplotlib.pyplot as plt

def adjust_pts(pts,lroi):
  return pts*lroi.wh().reshape((2,1)) + lroi.tl().reshape((2,1))

lp_threshold = .5
input_dir = "2lines_images"
#wpod_net_path = "./TrainedWpodNetModels/wpod-net_100k_moto_dataset_best_pretrained_more_falses_no_ad_attack.json"
wpod_net_path = "./TrainedWpodNetModels/wpod-net_100k_moto_dataset_best_pretrained_less_falses_ad_attack.json"
wpod_net = load_model(wpod_net_path)

imgs_paths = glob('%s/*.jpg' % input_dir)
print(imgs_paths)
print('Searching for license plates using WPOD-NET')

import tensorflow as tf

for i,img_path in enumerate(imgs_paths):
  print('\t Processing %s' % img_path)

  bname = splitext(basename(img_path))[0]
  Ivehicle = cv2.imread(img_path)
  
  ratio = float(max(Ivehicle.shape[:2]))/min(Ivehicle.shape[:2])
  side  = int(ratio*288.)
  bound_dim = min(side + (side%(2**4)),608)
  print("\t\tShape Image:{} Bound dim: {}, ratio: {}".format(Ivehicle.shape[:2], bound_dim,ratio))
  Llp,LlpImgs,_ = detect_lp(wpod_net,im2single(Ivehicle.copy()),bound_dim,2**4,(470, 110),lp_threshold)
  i=0
  if len(LlpImgs):
    for i, lpImg in enumerate(LlpImgs): # print all predictions
      Ilp = lpImg
      
      #Ilp = cv2.cvtColor(Ilp, cv2.COLOR_BGR2GRAY)
      #Ilp = cv2.cvtColor(Ilp, cv2.COLOR_GRAY2BGR)
      h, w, _ = Ilp.shape
      if h==200 and w==280:
        upper_plate = Ilp[:110, :]
        lower_plate = Ilp[90:, :]
        img = cv2.resize(upper_plate, (470, 110), interpolation=cv2.INTER_NEAREST)
        cv2.imwrite("./crop_2_lines/{}_{}.jpg".format(bname, i), img*255)
        i += 1
        plt.subplot(1, 2, 1)
        plt.imshow(img)
        img = cv2.resize(lower_plate, (470, 110), interpolation=cv2.INTER_NEAREST)
        cv2.imwrite("./crop_2_lines/{}_{}.jpg".format(bname, i), img*255)
        i += 1
        plt.subplot(1, 2, 2)
        plt.imshow(img)
        plt.show()
      