# -*- coding: utf-8 -*-
"""test_wpodnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UiVaVP4uXQWYJO01g0B3GWyI6RO9VYJ8
"""

import sys, os

try:
  import google.colab
  colab = True
except:
  colab = False
import timeit
import platform
import os
import sys

if colab is True:
    from google.colab.patches import cv2_imshow
    
# Operating System
OS = platform.system()                                                               # returns 'Windows', 'Linux', etc

start_download_time = timeit.default_timer()

if not os.path.exists("./test_images.zip"):
    os.system('gdown --id "1xBtpKAKvW8xnyyzzSYUkhfp1g4cf_M0e" --output "./test_images.zip"')
    if OS == "Linux":
        os.system('unzip -o -n "./test_images.zip" -d "./"')

if not os.path.exists("./TrainedWpodNetModels.zip"):
    os.system('gdown --id "1Gn_dfzUX5CmVkca5DbcPeLEjud9dAcxU" --output "./TrainedWpodNetModels.zip"')
    if OS == "Linux":
        os.system('unzip -o -n "./TrainedWpodNetModels.zip" -d "./"')

print("Download and Unzip of Dataset and Models Time : ", timeit.default_timer() - start_download_time)

import keras
import cv2
import traceback
import pdb
import numpy as np

from glob import glob
from os.path import splitext, basename
from src.utils import im2single
from src.keras_utils import load_model, detect_lp
from src.label import Shape, writeShapes
import matplotlib.pyplot as plt

def adjust_pts(pts,lroi):
  return pts*lroi.wh().reshape((2,1)) + lroi.tl().reshape((2,1))

lp_threshold = .5
input_dir = "Images"
wpod_net_path = "./TrainedWpodNetModels/wpod-net_100k_moto_dataset_best.json"
wpod_net = load_model(wpod_net_path)

imgs_paths = glob('%s/*.jpg' % input_dir)
print(imgs_paths)
print('Searching for license plates using WPOD-NET')

for i,img_path in enumerate(imgs_paths):

  print('\t Processing %s' % img_path)

  bname = splitext(basename(img_path))[0]
  Ivehicle = cv2.imread(img_path)
  
  ratio = float(max(Ivehicle.shape[:2]))/min(Ivehicle.shape[:2])
  side  = int(ratio*288.)
  bound_dim = min(side + (side%(2**4)),608)
  print("\t\tBound dim: %d, ratio: %f" % (bound_dim,ratio))
  Llp,LlpImgs,_ = detect_lp(wpod_net,im2single(Ivehicle.copy()),bound_dim,2**4,(470, 110),lp_threshold)

  if len(LlpImgs):
    for i, lpImg in enumerate(LlpImgs): # print all predictions
      Ilp = lpImg
      Ilp = cv2.cvtColor(Ilp, cv2.COLOR_BGR2GRAY)
      Ilp = cv2.cvtColor(Ilp, cv2.COLOR_GRAY2BGR)
      c = Llp[i].pts
      h,w, _ = Ivehicle.shape
      pts = np.array([[c[0][0]*w, c[1][0]*h],
                  [c[0][1]*w, c[1][1]*h],
                  [c[0][2]*w, c[1][2]*h],
                  [c[0][3]*w, c[1][3]*h]], np.int32)

      pts = pts.reshape((-1, 1, 2))
      Ivehicle = cv2.polylines(Ivehicle, [pts], True, (0, 255, 0), 10)
      
      plt.subplot(1, 2, 1)
      plt.imshow(Ivehicle[...,::-1])
    
      s = Shape(c)

      plt.subplot(1, 2, 2)
      plt.imshow(Ilp)
      plt.show()